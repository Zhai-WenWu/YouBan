package cn.bjhdltcdn.p2plive.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.bjhdltcdn.p2plive.model.Props;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROPS".
*/
public class PropsDao extends AbstractDao<Props, Long> {

    public static final String TABLENAME = "PROPS";

    /**
     * Properties of entity Props.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PropsId = new Property(0, long.class, "propsId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Duration = new Property(5, String.class, "duration", false, "DURATION");
        public final static Property Descrption = new Property(6, String.class, "descrption", false, "DESCRPTION");
        public final static Property SalePrice = new Property(7, int.class, "salePrice", false, "SALE_PRICE");
        public final static Property IsSale = new Property(8, int.class, "isSale", false, "IS_SALE");
        public final static Property GiftType = new Property(9, int.class, "giftType", false, "GIFT_TYPE");
        public final static Property AnimatedUrl = new Property(10, String.class, "animatedUrl", false, "ANIMATED_URL");
    }


    public PropsDao(DaoConfig config) {
        super(config);
    }
    
    public PropsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: propsId
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"PRICE\" INTEGER NOT NULL ," + // 3: price
                "\"URL\" TEXT," + // 4: url
                "\"DURATION\" TEXT," + // 5: duration
                "\"DESCRPTION\" TEXT," + // 6: descrption
                "\"SALE_PRICE\" INTEGER NOT NULL ," + // 7: salePrice
                "\"IS_SALE\" INTEGER NOT NULL ," + // 8: isSale
                "\"GIFT_TYPE\" INTEGER NOT NULL ," + // 9: giftType
                "\"ANIMATED_URL\" TEXT);"); // 10: animatedUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Props entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPropsId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getPrice());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String descrption = entity.getDescrption();
        if (descrption != null) {
            stmt.bindString(7, descrption);
        }
        stmt.bindLong(8, entity.getSalePrice());
        stmt.bindLong(9, entity.getIsSale());
        stmt.bindLong(10, entity.getGiftType());
 
        String animatedUrl = entity.getAnimatedUrl();
        if (animatedUrl != null) {
            stmt.bindString(11, animatedUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Props entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPropsId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getPrice());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String descrption = entity.getDescrption();
        if (descrption != null) {
            stmt.bindString(7, descrption);
        }
        stmt.bindLong(8, entity.getSalePrice());
        stmt.bindLong(9, entity.getIsSale());
        stmt.bindLong(10, entity.getGiftType());
 
        String animatedUrl = entity.getAnimatedUrl();
        if (animatedUrl != null) {
            stmt.bindString(11, animatedUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Props readEntity(Cursor cursor, int offset) {
        Props entity = new Props( //
            cursor.getLong(offset + 0), // propsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // descrption
            cursor.getInt(offset + 7), // salePrice
            cursor.getInt(offset + 8), // isSale
            cursor.getInt(offset + 9), // giftType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // animatedUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Props entity, int offset) {
        entity.setPropsId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescrption(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSalePrice(cursor.getInt(offset + 7));
        entity.setIsSale(cursor.getInt(offset + 8));
        entity.setGiftType(cursor.getInt(offset + 9));
        entity.setAnimatedUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Props entity, long rowId) {
        entity.setPropsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Props entity) {
        if(entity != null) {
            return entity.getPropsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Props entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
