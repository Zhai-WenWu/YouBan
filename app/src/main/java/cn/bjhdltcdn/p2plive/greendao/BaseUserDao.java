package cn.bjhdltcdn.p2plive.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.bjhdltcdn.p2plive.model.BaseUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_USER".
*/
public class BaseUserDao extends AbstractDao<BaseUser, Long> {

    public static final String TABLENAME = "BASE_USER";

    /**
     * Properties of entity BaseUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserIcon = new Property(3, String.class, "userIcon", false, "USER_ICON");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property Age = new Property(5, int.class, "age", false, "AGE");
        public final static Property Location = new Property(6, String.class, "location", false, "LOCATION");
        public final static Property IsSchoolmate = new Property(7, int.class, "isSchoolmate", false, "IS_SCHOOLMATE");
        public final static Property UserLevel = new Property(8, int.class, "userLevel", false, "USER_LEVEL");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property SchoolName = new Property(10, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property PhoneNumber = new Property(11, String.class, "phoneNumber", false, "PHONE_NUMBER");
    }


    public BaseUserDao(DaoConfig config) {
        super(config);
    }
    
    public BaseUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"USER_ICON\" TEXT," + // 3: userIcon
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"AGE\" INTEGER NOT NULL ," + // 5: age
                "\"LOCATION\" TEXT," + // 6: location
                "\"IS_SCHOOLMATE\" INTEGER NOT NULL ," + // 7: isSchoolmate
                "\"USER_LEVEL\" INTEGER NOT NULL ," + // 8: userLevel
                "\"CITY\" TEXT," + // 9: city
                "\"SCHOOL_NAME\" TEXT," + // 10: schoolName
                "\"PHONE_NUMBER\" TEXT);"); // 11: phoneNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(4, userIcon);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindLong(6, entity.getAge());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
        stmt.bindLong(8, entity.getIsSchoolmate());
        stmt.bindLong(9, entity.getUserLevel());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(11, schoolName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(12, phoneNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(4, userIcon);
        }
        stmt.bindLong(5, entity.getSex());
        stmt.bindLong(6, entity.getAge());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
        stmt.bindLong(8, entity.getIsSchoolmate());
        stmt.bindLong(9, entity.getUserLevel());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(11, schoolName);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(12, phoneNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BaseUser readEntity(Cursor cursor, int offset) {
        BaseUser entity = new BaseUser( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userIcon
            cursor.getInt(offset + 4), // sex
            cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location
            cursor.getInt(offset + 7), // isSchoolmate
            cursor.getInt(offset + 8), // userLevel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // city
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // schoolName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // phoneNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseUser entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setAge(cursor.getInt(offset + 5));
        entity.setLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSchoolmate(cursor.getInt(offset + 7));
        entity.setUserLevel(cursor.getInt(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSchoolName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhoneNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaseUser entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaseUser entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaseUser entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
